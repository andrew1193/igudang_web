@model CustomerInfoModel
@using Nop.Web.Models.Customer;
@using Nop.Core;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
    //page class
    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-customer-info-page");
}

<div class="content-wrap pt-2">
    <div class="container clearfix">
        <div class="container clearfix">
            <!-- Post Content
            ============================================= -->
            <div class="postcontent nobottommargin col_last clearfix">
                @if (Model.CountryEnabled && Model.StateProvinceEnabled)
                {
                    <script type="text/javascript">
                        $(document).ready(function () {
                            $("#@Html.FieldIdFor(model => model.CountryId)").change(function () {
                                var selectedItem = $(this).val();
                                var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
                                var statesProgress = $("#states-loading-progress");
                                statesProgress.show();
                                $.ajax({
                                    cache: false,
                                    type: "GET",
                                    url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                                    data: { "countryId": selectedItem, "addSelectStateItem": "true" },
                                    success: function (data) {
                                        ddlStates.html('');
                                        $.each(data, function (id, option) {
                                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                                        });
                                        statesProgress.hide();
                                    },
                                    error: function (xhr, ajaxOptions, thrownError) {
                                        alert('Failed to retrieve states.');
                                        statesProgress.hide();
                                    }
                                });
                            });
                        });
                    </script>
                }
                <div class="page account-page customer-info-page">
                    <div class="page-title">
                        <h1>@T("Account.MyAccount") - @T("Account.CustomerInfo")</h1>
                    </div>
                    <div class="page-body">
                        <div class="col_full">
                            @using (Html.BeginForm())
            {
                                @Html.AntiForgeryToken()
                                var validationSummary = Html.ValidationSummary(true);
                                if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                                {
                                    <div class="message-error">@validationSummary</div>
                                }
                                <div class="fieldset">
                                    <div class="title">
                                        <strong>@T("Account.YourPersonalDetails")</strong>
                                    </div>
                                    <div class="form-fields">
                                        @if (Model.GenderEnabled)
                                        {
                                            <div class="row" style="padding:10px">
                                                <div class="form-group">
                                                    <div class="col-md-2">
                                                        @Html.LabelFor(model => model.Gender, new { }, ":")
                                                        @Html.RequiredHint()
                                                    </div>
                                                    <div class="col-md-7">
                                                        <div class="gender">
                                                            <span class="male">
                                                                @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "gender-male" })
                                                                <label class="forcheckbox" for="gender-male">@T("Account.Fields.Gender.Male")</label>
                                                            </span>
                                                            <span class="female">
                                                                @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "gender-female" })
                                                                <label class="forcheckbox" for="gender-female">@T("Account.Fields.Gender.Female")</label>
                                                            </span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>


                                        }

                                        <div class="row" style="padding:10px">
                                            <div class="form-group">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.FirstName, new { }, ":")
                                                    @Html.RequiredHint()
                                                </div>
                                                <div class="col-md-7">
                                                    @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.FirstName)
                                                </div>
                                            </div>
                                        </div>


                                        <div class="row" style="padding:10px">
                                            <div class="form-group">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.LastName, new { }, ":")
                                                    @Html.RequiredHint()
                                                </div>
                                                <div class="col-md-7">
                                                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.LastName)
                                                </div>
                                            </div>
                                        </div>






                                        <div class="row" style="padding:10px">
                                            <div class="form-group">
                                                <div class="col-md-2">
                                                    @Html.LabelFor(model => model.Email, new { }, ":")
                                                    @Html.RequiredHint()
                                                </div>
                                                <div class="col-md-7">
                                                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.Email)
                                                </div>
                                            </div>
                                        </div>
                                       
                                       
                                      
                                        @if (!String.IsNullOrEmpty(Model.EmailToRevalidate))
                                        {



                                            <div class="col_full">
                                                @Html.LabelFor(model => model.EmailToRevalidate, new { }, ":")
                                                <span class="email-to-revalidate">@Model.EmailToRevalidate</span>
                                                <span class="email-to-revalidate-note"><em>@T("Account.Fields.EmailToRevalidate.Note")</em></span>
                                            </div>
                                        }
                                        @if (Model.UsernamesEnabled)
                                        {
                                            if (Model.AllowUsersToChangeUsernames)
                                            {
                                                <div class="col_full">
                                                    @Html.LabelFor(model => model.Username, new { }, ":")
                                                    @Html.EditorFor(model => model.Username)
                                                    @Html.RequiredHint()
                                                    @Html.ValidationMessageFor(model => model.Username)
                                                    @if (Model.CheckUsernameAvailabilityEnabled)
                                                    {
                                                        @Html.Partial("_CheckUsernameAvailability")
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="col_full">
                                                    @Html.LabelFor(model => model.Username, new { }, ":")
                                                    <span class="readonly-username">@Model.Username</span>
                                                </div>
                                            }
                                        }


                                        @if (Model.DateOfBirthEnabled)
                                        {

                                            <div class="row" style="padding:10px">
                                                <div class="form-group">
                                                    <div class="col-md-2">
                                                        <label class="control-label col-xs-12 col-md-3" style="padding-left:0px">@T("Account.Fields.DateOfBirth"):</label>
                                                    </div>
                                                    <div class="col-md-10">
                                                        @Html.DatePickerDropDowns(Html.FieldNameFor(x => x.DateOfBirthDay),
                                            Html.FieldNameFor(x => x.DateOfBirthMonth),
                                            Html.FieldNameFor(x => x.DateOfBirthYear),
                                            DateTime.Now.Year - 110,
                                            DateTime.Now.Year,
                                            Model.DateOfBirthDay,
                                            Model.DateOfBirthMonth,
                                            Model.DateOfBirthYear)


                                                        @if (Model.DateOfBirthRequired)
                                                        {
                                                            @Html.RequiredHint()
                                                        }
                                                        @Html.ValidationMessageFor(model => model.DateOfBirthDay)
                                                        @Html.ValidationMessageFor(model => model.DateOfBirthMonth)
                                                        @Html.ValidationMessageFor(model => model.DateOfBirthYear)
                                                    </div>
                                                </div>
                                            </div>


                                            if (Model.CompanyEnabled || Model.DisplayVatNumber)
                                            {


                                                if (Model.CompanyEnabled)
                                                {
                                                    <div class="row" style="padding:10px">
                                                        <div class="form-group">
                                                            <div class="col-md-2">
                                                                @Html.LabelFor(model => model.Company, new { }, ":")
                                                            </div>
                                                            <div class="col-md-7">
                                                                @Html.TextBoxFor(model => model.Company, new { @class = "form-control" })

                                                                @if (Model.CompanyRequired)
                                                                {
                                                                    @Html.RequiredHint()
                                                                }
                                                                @Html.ValidationMessageFor(model => model.Company)
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <br />


                                                }
                                                if (Model.DisplayVatNumber)
                                                {
                                                    <div class="col_full">
                                                        @Html.LabelFor(model => model.VatNumber, new { }, ":")
                                                        @Html.EditorFor(model => model.VatNumber)
                                                        <span class="vat-status">@Model.VatNumberStatusNote</span>
                                                        <span class="vat-note"><em>@T("Account.Fields.VatNumber.Note")</em></span>
                                                    </div>
                                                }


                                            }


                                        }

                                    </div>
                                  

                                </div>
                               
                                if (Model.StreetAddressEnabled ||
                                            Model.StreetAddress2Enabled ||
                                            Model.ZipPostalCodeEnabled ||
                                            Model.CityEnabled ||
                                            Model.CountryEnabled)
                                {
                                    <div class="fieldset">
                                        <div class="title">
                                            <strong>@T("Account.YourAddress")</strong>
                                        </div>
                                        <div class="form-fields">
                                            @if (Model.StreetAddressEnabled)
                                            {
                                                <div class="col_full">
                                                    @Html.LabelFor(model => model.StreetAddress, new { }, ":")
                                                    @Html.EditorFor(model => model.StreetAddress)
                                                    @if (Model.StreetAddressRequired)
                                                    {
                                                        @Html.RequiredHint()
                                                    }
                                                    @Html.ValidationMessageFor(model => model.StreetAddress)
                                                </div>
                                            }
                                            @if (Model.StreetAddress2Enabled)
                                            {
                                                <div class="col_full">
                                                    @Html.LabelFor(model => model.StreetAddress2, new { }, ":")
                                                    @Html.EditorFor(model => model.StreetAddress2)
                                                    @if (Model.StreetAddress2Required)
                                                    {
                                                        @Html.RequiredHint()
                                                    }
                                                    @Html.ValidationMessageFor(model => model.StreetAddress2)
                                                </div>
                                            }
                                            @if (Model.ZipPostalCodeEnabled)
                                            {
                                                <div class="col_full">
                                                    @Html.LabelFor(model => model.ZipPostalCode, new { }, ":")
                                                    @Html.EditorFor(model => model.ZipPostalCode)
                                                    @if (Model.ZipPostalCodeRequired)
                                                    {
                                                        @Html.RequiredHint()
                                                    }
                                                    @Html.ValidationMessageFor(model => model.ZipPostalCode)
                                                </div>
                                            }
                                            @if (Model.CityEnabled)
                                            {
                                                <div class="col_full">
                                                    @Html.LabelFor(model => model.City, new { }, ":")
                                                    @Html.EditorFor(model => model.City)
                                                    @if (Model.CityRequired)
                                                    {
                                                        @Html.RequiredHint()
                                                    }
                                                    @Html.ValidationMessageFor(model => model.City)
                                                </div>
                                            }
                                            @if (Model.CountryEnabled)
                                            {
                                                <div class="col_full">
                                                    @Html.LabelFor(model => model.CountryId, new { }, ":")
                                                    @Html.DropDownList("CountryId", Model.AvailableCountries)
                                                    @if (Model.CountryRequired)
                                                    {
                                                        @Html.RequiredHint()
                                                    }
                                                    @Html.ValidationMessageFor(model => model.CountryId)
                                                </div>
                                            }
                                            @if (Model.CountryEnabled && Model.StateProvinceEnabled)
                                            {
                                                <div class="col_full">
                                                    @Html.LabelFor(model => model.StateProvinceId, new { }, ":")
                                                    @Html.DropDownList("StateProvinceId", Model.AvailableStates)
                                                    @if (Model.StateProvinceRequired)
                                                    {
                                                        @Html.RequiredHint()
                                                    }
                                                    @Html.ValidationMessageFor(model => model.StateProvinceId)
                                                    <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                if (Model.PhoneEnabled || Model.FaxEnabled)
                                {
                                    <div class="fieldset">
                                        <div class="title">
                                            <strong>@T("Account.YourContactInformation")</strong>
                                        </div>
                                        <div class="form-fields">
                                            @if (Model.PhoneEnabled)
                                            {
                                                <div class="col_full">
                                                    @Html.LabelFor(model => model.Phone, new { }, ":")
                                                    @Html.EditorFor(model => model.Phone)
                                                    @if (Model.PhoneRequired)
                                                    {
                                                        @Html.RequiredHint()
                                                    }
                                                    @Html.ValidationMessageFor(model => model.Phone)
                                                </div>
                                            }
                                            @if (Model.FaxEnabled)
                                            {
                                                <div class="col_full">
                                                    @Html.LabelFor(model => model.Fax, new { }, ":")
                                                    @Html.EditorFor(model => model.Fax)
                                                    @if (Model.FaxRequired)
                                                    {
                                                        @Html.RequiredHint()
                                                    }
                                                    @Html.ValidationMessageFor(model => model.Fax)
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                if (Model.NewsletterEnabled || Model.CustomerAttributes.Count > 0)
                                {
                                    <div class="fieldset">
                                        <div class="title">
                                            <strong>@T("Account.Options")</strong>
                                        </div>
                                        <div class="form-fields">
                                            @if (Model.NewsletterEnabled)
                                            {
                                                <div class="col_full">
                                                    @Html.LabelFor(model => model.Newsletter, new { }, ":")
                                                    @Html.EditorFor(model => model.Newsletter)
                                                    @Html.ValidationMessageFor(model => model.Newsletter)
                                                </div>
                                            }
                                            @if (Model.CustomerAttributes.Count > 0)
                                            {
                                                @Html.Partial("_CustomerAttributes", Model.CustomerAttributes)
                                            }
                                        </div>
                                    </div>
                                }
                                if (Model.AllowCustomersToSetTimeZone || Model.SignatureEnabled)
                                {
                                    <div class="fieldset">
                                        <div class="title">
                                            <strong>@T("Account.Preferences")</strong>
                                        </div>
                                        <div class="form-fields">
                                            @if (Model.AllowCustomersToSetTimeZone)
                                            {
                                                <div class="col_full">
                                                    @Html.LabelFor(model => model.TimeZoneId, new { }, ":")
                                                    @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)
                                                    @Html.ValidationMessageFor(model => model.TimeZoneId)
                                                </div>
                                            }
                                            @if (Model.SignatureEnabled)
                                            {
                                                <div class="col_full">
                                                    @Html.LabelFor(model => model.Signature, new { }, ":")
                                                    @Html.TextAreaFor(model => model.Signature, new { @class = "account-signature-text" })
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }

                                if (Model.NumberOfExternalAuthenticationProviders > 0)
                                {
                                    <div class="fieldset">
                                        <div class="title">
                                            <strong>@T("Account.AssociatedExternalAuth")</strong>
                                        </div>
                                        @if (Model.AssociatedExternalAuthRecords.Count > 0)
                                        {
                                            //existing associated external records
                                            <div class="table-wrapper">
                                                <table class="data-table">
                                                    <colgroup>
                                                        <col />
                                                        <col />
                                                        <col />
                                                    </colgroup>
                                                    <thead>
                                                        <tr>
                                                            <th class="auth-method-name">
                                                                @T("Account.AssociatedExternalAuth.AuthMethodName")
                                                            </th>
                                                            <th class="email">
                                                                @T("Account.AssociatedExternalAuth.Email")
                                                            </th>
                                                            <th class="external-id">
                                                                @T("Account.AssociatedExternalAuth.ExternalIdentifier")
                                                            </th>
                                                            <th class="remove">
                                                                @T("Account.AssociatedExternalAuth.Remove")
                                                            </th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var item in Model.AssociatedExternalAuthRecords)
                                                        {
                                                            <tr>
                                                                <td class="auth-method-name">
                                                                    @item.AuthMethodName
                                                                </td>
                                                                <td class="email">
                                                                    @item.Email
                                                                </td>
                                                                <td class="external-id">
                                                                    @CommonHelper.EnsureMaximumLength(item.ExternalIdentifier, 40, "...")
                                                                </td>
                                                                <td class="remove">
                                                                    <a href="#" onclick="return removeexternalassociation(@item.Id)">@T("Account.AssociatedExternalAuth.Remove")</a>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        }

                                        @if (Model.NumberOfExternalAuthenticationProviders > Model.AssociatedExternalAuthRecords.Count)
                                        {
                                            //we can add more external records
                                            <div class="form-fields add-more-external-records">
                                                @T("Account.AssociatedExternalAuth.AddMoreRecords") <a href="@Url.RouteUrl("Login", null, "http")">@Url.RouteUrl("Login", null, "http")</a>
                                            </div>
                                        }
                                    </div>
                                }
                                <div class="buttons">
                                    <input type="submit" value="@T("Common.Save")" name="save-info-button" class="button button-3d button-black nomargin" />
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <script type="text/javascript">
                    function removeexternalassociation(itemId) {
                        if (confirm('@T("Common.AreYouSure")')) {
                            var postData = {
                                id: itemId
                            };
                            addAntiForgeryToken(postData);
                            $.ajax({
                                cache: false,
                                type: 'POST',
                                url: '@Url.Action("RemoveExternalAssociation", "Customer")',
                                data: postData,
                                dataType: 'json',
                                success: function (data) {
                                    location.href = data.redirect;
                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    alert('Failed to delete');
                                }
                            });
                        }
                        return false;
                    }
                </script>
            </div><!-- .postcontent end -->

            @Html.Action("CustomerNavigation", "Customer", new { selectedTabId = CustomerNavigationEnum.Info })
        </div>
    </div>
</div>



@*@section left
    {
        @Html.Action("CustomerNavigation", "Customer", new { selectedTabId = CustomerNavigationEnum.Info })
    }
    @if (Model.CountryEnabled && Model.StateProvinceEnabled)
    {
        <script type="text/javascript">
            $(document).ready(function () {
                $("#@Html.FieldIdFor(model => model.CountryId)").change(function () {
                    var selectedItem = $(this).val();
                    var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
                 var statesProgress = $("#states-loading-progress");
                 statesProgress.show();
                 $.ajax({
                     cache: false,
                     type: "GET",
                     url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                     data: { "countryId": selectedItem, "addSelectStateItem": "true" },
                        success: function (data) {
                            ddlStates.html('');
                            $.each(data, function (id, option) {
                                ddlStates.append($('<option></option>').val(option.id).html(option.name));
                            });
                            statesProgress.hide();
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve states.');
                            statesProgress.hide();
                        }
                    });
                });
            });
        </script>
    }
    <div class="page account-page customer-info-page">
        <div class="page-title">
            <h1>@T("Account.MyAccount") - @T("Account.CustomerInfo")</h1>
        </div>
        <div class="page-body">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                var validationSummary = Html.ValidationSummary(true);
                if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                {
                    <div class="message-error">@validationSummary</div>
                }
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.YourPersonalDetails")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.GenderEnabled)
                        {
                            <div class="col_full">
                                <label>@T("Account.Fields.Gender"):</label>
                                <div class="gender">
                                    <span class="male">
                                        @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "gender-male"})
                                        <label class="forcheckbox" for="gender-male">@T("Account.Fields.Gender.Male")</label>
                                    </span>
                                    <span class="female">
                                        @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "gender-female" })
                                        <label class="forcheckbox" for="gender-female">@T("Account.Fields.Gender.Female")</label>
                                    </span>
                                </div>
                            </div>
                        }
                        <div class="col_full">
                            @Html.LabelFor(model => model.FirstName, new { }, ":")
                            @Html.EditorFor(model => model.FirstName)
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.FirstName)
                        </div>
                        <div class="col_full">
                            @Html.LabelFor(model => model.LastName, new { }, ":")
                            @Html.EditorFor(model => model.LastName)
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.LastName)
                        </div>
                        @if (Model.DateOfBirthEnabled)
                        {
                            <div class="inputs date-of-birth">
                                <label>@T("Account.Fields.DateOfBirth"):</label>
                                @Html.DatePickerDropDowns(Html.FieldNameFor(x => x.DateOfBirthDay),
                                            Html.FieldNameFor(x => x.DateOfBirthMonth),
                                            Html.FieldNameFor(x => x.DateOfBirthYear),
                                            DateTime.Now.Year - 110,
                                            DateTime.Now.Year,
                                            Model.DateOfBirthDay,
                                            Model.DateOfBirthMonth,
                                            Model.DateOfBirthYear)
                                @if (Model.DateOfBirthRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.DateOfBirthDay)
                                @Html.ValidationMessageFor(model => model.DateOfBirthMonth)
                                @Html.ValidationMessageFor(model => model.DateOfBirthYear)
                            </div>
                        }
                        <div class="col_full">
                            @Html.LabelFor(model => model.Email, new { }, ":")
                            @Html.EditorFor(model => model.Email)
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.Email)
                        </div>
                        @if (!String.IsNullOrEmpty(Model.EmailToRevalidate))
                        {
                            <div class="col_full">
                                @Html.LabelFor(model => model.EmailToRevalidate, new { }, ":")
                                <span class="email-to-revalidate">@Model.EmailToRevalidate</span>
                                <span class="email-to-revalidate-note"><em>@T("Account.Fields.EmailToRevalidate.Note")</em></span>
                            </div>
                        }
                        @if (Model.UsernamesEnabled)
                        {
                            if (Model.AllowUsersToChangeUsernames)
                            {
                            <div class="col_full">
                                @Html.LabelFor(model => model.Username, new { }, ":")
                                @Html.EditorFor(model => model.Username)
                                @Html.RequiredHint()
                                @Html.ValidationMessageFor(model => model.Username)
                                @if (Model.CheckUsernameAvailabilityEnabled)
                                {
                                    @Html.Partial("_CheckUsernameAvailability")
                                }
                            </div>
                            }
                            else
                            {
                            <div class="col_full">
                                @Html.LabelFor(model => model.Username, new { }, ":")
                                <span class="readonly-username">@Model.Username</span>
                            </div>
                            }
                        }
                    </div>
                </div>
                if (Model.CompanyEnabled || Model.DisplayVatNumber)
                {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.CompanyDetails")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.CompanyEnabled)
                        {
                            <div class="col_full">
                                @Html.LabelFor(model => model.Company, new { }, ":")
                                @Html.EditorFor(model => model.Company)
                                @if (Model.CompanyRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.Company)
                            </div>
                        }
                        @if (Model.DisplayVatNumber)
                        {
                            <div class="col_full">
                                @Html.LabelFor(model => model.VatNumber, new { }, ":")
                                @Html.EditorFor(model => model.VatNumber)
                                <span class="vat-status">@Model.VatNumberStatusNote</span>
                                <span class="vat-note"><em>@T("Account.Fields.VatNumber.Note")</em></span>
                            </div>
                        }
                    </div>
                </div>
                        }
                        if (Model.StreetAddressEnabled ||
                                    Model.StreetAddress2Enabled ||
                                    Model.ZipPostalCodeEnabled ||
                                    Model.CityEnabled ||
                                    Model.CountryEnabled)
                        {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.YourAddress")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.StreetAddressEnabled)
                        {
                            <div class="col_full">
                                @Html.LabelFor(model => model.StreetAddress, new { }, ":")
                                @Html.EditorFor(model => model.StreetAddress)
                                @if (Model.StreetAddressRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.StreetAddress)
                            </div>
                        }
                        @if (Model.StreetAddress2Enabled)
                        {
                            <div class="col_full">
                                @Html.LabelFor(model => model.StreetAddress2, new { }, ":")
                                @Html.EditorFor(model => model.StreetAddress2)
                                @if (Model.StreetAddress2Required)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.StreetAddress2)
                            </div>
                        }
                        @if (Model.ZipPostalCodeEnabled)
                        {
                            <div class="col_full">
                                @Html.LabelFor(model => model.ZipPostalCode, new { }, ":")
                                @Html.EditorFor(model => model.ZipPostalCode)
                                @if (Model.ZipPostalCodeRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.ZipPostalCode)
                            </div>
                        }
                        @if (Model.CityEnabled)
                        {
                            <div class="col_full">
                                @Html.LabelFor(model => model.City, new { }, ":")
                                @Html.EditorFor(model => model.City)
                                @if (Model.CityRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.City)
                            </div>
                        }
                        @if (Model.CountryEnabled)
                        {
                            <div class="col_full">
                                @Html.LabelFor(model => model.CountryId, new { }, ":")
                                @Html.DropDownList("CountryId", Model.AvailableCountries)
                                @if (Model.CountryRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.CountryId)
                            </div>
                        }
                        @if (Model.CountryEnabled && Model.StateProvinceEnabled)
                        {
                            <div class="col_full">
                                @Html.LabelFor(model => model.StateProvinceId, new { }, ":")
                                @Html.DropDownList("StateProvinceId", Model.AvailableStates)
                                @if (Model.StateProvinceRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.StateProvinceId)
                                <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                            </div>
                        }
                    </div>
                </div>
                        }
                        if (Model.PhoneEnabled || Model.FaxEnabled)
                        {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.YourContactInformation")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.PhoneEnabled)
                        {
                            <div class="col_full">
                                @Html.LabelFor(model => model.Phone, new { }, ":")
                                @Html.EditorFor(model => model.Phone)
                                @if (Model.PhoneRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.Phone)
                            </div>
                        }
                        @if (Model.FaxEnabled)
                        {
                            <div class="col_full">
                                @Html.LabelFor(model => model.Fax, new { }, ":")
                                @Html.EditorFor(model => model.Fax)
                                @if (Model.FaxRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.Fax)
                            </div>
                        }
                    </div>
                </div>
                        }
                        if (Model.NewsletterEnabled || Model.CustomerAttributes.Count > 0)
                        {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.Options")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.NewsletterEnabled)
                        {
                            <div class="col_full">
                                @Html.LabelFor(model => model.Newsletter, new {}, ":")
                                @Html.EditorFor(model => model.Newsletter)
                                @Html.ValidationMessageFor(model => model.Newsletter)
                            </div>
                        }
                        @if (Model.CustomerAttributes.Count > 0)
                        {
                            @Html.Partial("_CustomerAttributes", Model.CustomerAttributes)
                        }
                    </div>
                </div>
                        }
                        if (Model.AllowCustomersToSetTimeZone || Model.SignatureEnabled)
                        {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.Preferences")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.AllowCustomersToSetTimeZone)
                        {
                            <div class="col_full">
                                @Html.LabelFor(model => model.TimeZoneId, new { }, ":")
                                @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)
                                @Html.ValidationMessageFor(model => model.TimeZoneId)
                            </div>
                        }
                        @if (Model.SignatureEnabled)
                        {
                            <div class="col_full">
                                @Html.LabelFor(model => model.Signature, new { }, ":")
                                @Html.TextAreaFor(model => model.Signature, new { @class = "account-signature-text" })
                            </div>
                        }
                    </div>
                </div>
                        }

                if (Model.NumberOfExternalAuthenticationProviders > 0)
                {
                    <div class="fieldset">
                        <div class="title">
                            <strong>@T("Account.AssociatedExternalAuth")</strong>
                        </div>
                        @if (Model.AssociatedExternalAuthRecords.Count > 0)
                        {
                            //existing associated external records
                            <div class="table-wrapper">
                                <table class="data-table">
                                    <colgroup>
                                        <col />
                                        <col />
                                        <col />
                                    </colgroup>
                                    <thead>
                                        <tr>
                                            <th class="auth-method-name">
                                                @T("Account.AssociatedExternalAuth.AuthMethodName")
                                            </th>
                                            <th class="email">
                                                @T("Account.AssociatedExternalAuth.Email")
                                            </th>
                                            <th class="external-id">
                                                @T("Account.AssociatedExternalAuth.ExternalIdentifier")
                                            </th>
                                            <th class="remove">
                                                @T("Account.AssociatedExternalAuth.Remove")
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.AssociatedExternalAuthRecords)
                                        {
                                            <tr>
                                                <td class="auth-method-name">
                                                    @item.AuthMethodName
                                                </td>
                                                <td class="email">
                                                    @item.Email
                                                </td>
                                                <td class="external-id">
                                                    @CommonHelper.EnsureMaximumLength(item.ExternalIdentifier, 40, "...")
                                                </td>
                                                <td class="remove">
                                                    <a href="#" onclick="return removeexternalassociation(@item.Id)">@T("Account.AssociatedExternalAuth.Remove")</a>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }

                        @if (Model.NumberOfExternalAuthenticationProviders > Model.AssociatedExternalAuthRecords.Count)
                        {
                            //we can add more external records
                            <div class="form-fields add-more-external-records">
                                @T("Account.AssociatedExternalAuth.AddMoreRecords") <a href="@Url.RouteUrl("Login", null, "http")">@Url.RouteUrl("Login", null, "http")</a>
                            </div>
                        }
                    </div>
                }
                <div class="buttons">
                    <input type="submit" value="@T("Common.Save")" name="save-info-button" class="button-1 save-customer-info-button" />
                </div>
            }
        </div>
    </div>
    <script type="text/javascript">
        function removeexternalassociation(itemId) {
            if (confirm('@T("Common.AreYouSure")')) {
                var postData = {
                    id: itemId
                };
                addAntiForgeryToken(postData);
                $.ajax({
                    cache: false,
                    type: 'POST',
                    url: '@Url.Action("RemoveExternalAssociation", "Customer")',
                    data: postData,
                    dataType: 'json',
                    success: function (data) {
                        location.href = data.redirect;
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to delete');
                    }
                });
            }
            return false;
        }
    </script>*@


<style>
    .col-xs-3 {
    width: 0%;
}

    .col-xs-2{
        padding-left:0px
    }
    .single-line {
        display: block;
        width: 100%;
        height: 34px;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.42857143;
        color: #555555;
        background-color: #ffffff;
        background-image: none;
        border: 1px solid #cccccc;
        border-radius: 4px;
        -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
        box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
        -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
        -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
        transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
    }


    .required {
        color: red;
    }

    .field-validation-error {
        color: red;
    }
</style>