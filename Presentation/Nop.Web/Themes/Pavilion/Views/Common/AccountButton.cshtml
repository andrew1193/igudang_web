@model HeaderLinksModel
@using Nop.Core
@using Nop.Core.Infrastructure
@using Nop.Services.Configuration
@using Nop.Web.Models.Common;

@{
    var currentStore = EngineContext.Current.Resolve<IStoreContext>().CurrentStore;
    var storeId = currentStore.Id;
    var settingService = EngineContext.Current.Resolve<ISettingService>();

    //Check if the setting ShowLoginPoup is true or false.
    bool shouldShowLoginInPopup = settingService.GetSettingByKey("PavilionThemeSettings.ShowLoginPopup", false, storeId, true);

    //Check if we should show the login popup.
    if(shouldShowLoginInPopup)
    {
        var reCaptchaVersion1 = "Version1";


        bool isReCaptchaV1EnabledOnLoginPage = (settingService.GetSettingByKey("captchasettings.enabled", false, storeId, true) &&
                                                settingService.GetSettingByKey("captchasettings.showonloginpage", false, storeId, true) &&
                                                (reCaptchaVersion1.Equals(settingService.GetSettingByKey("captchasettings.recaptchaversion", reCaptchaVersion1, storeId, true), StringComparison.InvariantCultureIgnoreCase)));

        // Since the LoginPopup is added via Ajax, reCaptcha v1 could not be loaded and won't work.
        // So we better not show the LoginPopup if reCaptcha v1 is enabled on the login page
        // http://stackoverflow.com/questions/23174979/google-recaptcha-doesnt-get-loaded-when-bootstrap-call-the-remote-modal
        if(isReCaptchaV1EnabledOnLoginPage)
        {
            shouldShowLoginInPopup = false;
        }else
        {
            bool isSSLEnabled = currentStore.SslEnabled;
            bool isSSLForcedOnAllPages = settingService.GetSettingByKey("securitysettings.forcesslforallpages", false, storeId, true);

            //Check if SSL is Enabled for Current Store and if it is forced for all pages so we do not show the Login Popup in that case. 
            bool isSSLEnabledAndNotForcedOnAllPages = isSSLEnabled && !isSSLForcedOnAllPages;

            if (isSSLEnabledAndNotForcedOnAllPages)
            {
                shouldShowLoginInPopup = false;
            }
        }
    }
}
@if (Model.IsAuthenticated)
{
    <div id="top-account">
        <a href="@Url.RouteUrl("CustomerInfo")" id="top-account-trigger"><i class="icon-user"></i></a>
    </div>
}

